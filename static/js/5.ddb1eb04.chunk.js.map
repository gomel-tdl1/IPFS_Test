{"version":3,"sources":["API/api.js","components/ViewYourTokens/TokenCard.tsx","components/ViewYourTokens/ViewTokens.tsx"],"names":["instance","axios","baseURL","headers","encodingAPI","hash","get","TokenCard","props","useState","visible","setVisible","confirmLoading","setConfirmLoading","userAddress","setUserAddress","transferAddress","setTransferAddress","useEffect","a","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","getAddress","address","handleOk","test","notification","error","key","message","NFTContractInstance","Contract","NFTContract","NFT_ABI","transferFrom","tokenOwner","tokenId","hoverable","style","width","cover","alt","src","file","onClick","warning","Meta","title","name","description","Paragraph","Text","type","onOk","okButtonProps","disabled","onCancel","placeholder","value","onChange","e","target","ViewTokensContainer","connect","state","isConnected","auth","ipfs","tokensResData","setTokensResData","filteredTokens","setFilteredTokens","paginatedTokens","setPaginatedTokens","currentPage","setCurrentPage","isFetching","setIsFetching","pagTokens","items","current_page","per_page_items","offset","slice","paginator","getNextTokenId","nextTokenID","tokensIDs","i","push","Promise","all","map","id","ownerOf","tokensOwners","tokenURI","tokensURIs","URI","then","response","data","tokensData","index","Preloader","height","className","checkedChildren","unCheckedChildren","defaultChecked","filter","current","total","length","pageSize","page","Title","level"],"mappings":"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","file":"static/js/5.ddb1eb04.chunk.js","sourcesContent":["import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://ipfs.io/ipfs/',\r\n    headers: {}\r\n});\r\n\r\nexport const encodingAPI = {\r\n    getEncodingData(hash) {\r\n        return instance.get(hash);\r\n    },\r\n};","import {Card, Input, Modal, notification} from \"antd\";\r\nimport React, {FC, useEffect, useState} from \"react\";\r\nimport Meta from \"antd/es/card/Meta\";\r\nimport {ethers} from \"ethers\";\r\nimport {NFTContract} from \"../../assets/constants\";\r\nimport {NFT_ABI} from \"../../assets/abis/NFT_ABI\";\r\nimport Paragraph from \"antd/es/typography/Paragraph\";\r\nimport Text from \"antd/es/typography/Text\";\r\n\r\ntype PropsType = {\r\n    tokenId: number\r\n    tokenOwner: string\r\n    name: string\r\n    description: string\r\n    file: string\r\n}\r\n\r\nconst TokenCard: FC<PropsType> = (props) => {\r\n    let [visible, setVisible] = useState<boolean>(false);\r\n    let [confirmLoading, setConfirmLoading] = useState<boolean>(false);\r\n    let [userAddress, setUserAddress] = useState<string>('');\r\n    let [transferAddress, setTransferAddress] = useState<string>('')\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n            const signer = provider.getSigner()\r\n            let address = await signer.getAddress();\r\n            setUserAddress(address)\r\n        })()\r\n    }, [])\r\n\r\n    const handleOk = async () => {\r\n        if(!/^0x[0-9a-f]{40}$/i.test(transferAddress)){\r\n            notification.error({\r\n                key: 'updatable',\r\n                message: 'Enter valid address'\r\n            })\r\n            return\r\n        }\r\n        setConfirmLoading(true)\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n        const signer = provider.getSigner()\r\n        const NFTContractInstance = new ethers.Contract(NFTContract, NFT_ABI, signer)\r\n\r\n        await NFTContractInstance.transferFrom(props.tokenOwner, transferAddress, props.tokenId);\r\n\r\n        setConfirmLoading(false)\r\n        setVisible(false)\r\n    }\r\n    const handleCancel = () => {\r\n        setVisible(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card\r\n                hoverable\r\n                style={{width: 350}}\r\n                cover={<img alt=\"example\"\r\n                            src={props.file ? `https://ipfs.io/ipfs/${props.file}` : \"https://i.stack.imgur.com/6M513.png\"}/>}\r\n                onClick={() => {\r\n                    if (props.tokenOwner === userAddress) {\r\n                        setVisible(true)\r\n                    } else {\r\n                        notification.warning({\r\n                            key: 'updatable',\r\n                            message: 'You cant transfer this token, because you are not owner'\r\n                        })\r\n                    }\r\n                }}\r\n            >\r\n                <Meta title={props.name} description={props.description}/>\r\n                {props.tokenOwner === userAddress && (\r\n                    <Paragraph>\r\n                        <Text type='success'>Ready for transfer</Text>\r\n                    </Paragraph>\r\n                )}\r\n            </Card>\r\n            <Modal\r\n                title=\"Transfer\"\r\n                visible={visible}\r\n                onOk={handleOk}\r\n                okButtonProps={{disabled: !transferAddress}}\r\n                confirmLoading={confirmLoading}\r\n                onCancel={handleCancel}\r\n            >\r\n                <Input placeholder='Enter address to transfer' value={transferAddress}\r\n                       onChange={(e) => setTransferAddress(e.target.value)}/>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\nexport default TokenCard","import {ethers} from \"ethers\";\r\nimport React, {FC, useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {NFTContract} from \"../../assets/constants\";\r\nimport {NFT_ABI} from \"../../assets/abis/NFT_ABI\";\r\nimport {encodingAPI} from \"../../API/api\";\r\nimport TokenCard from \"./TokenCard\";\r\nimport Title from \"antd/es/typography/Title\";\r\nimport {Pagination, Switch} from \"antd\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\ntype MapStateToPropsType = {\r\n    isConnected: boolean,\r\n    ipfs: any\r\n}\r\ntype MapDispatchToPropsType = {}\r\ntype OwnPropsType = {}\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & OwnPropsType;\r\n\r\nconst ViewTokens: FC<PropsType> = (props) => {\r\n    type TokenType = {\r\n        tokenId: number\r\n        tokenOwner: string\r\n        name: string\r\n        description: string\r\n        file: string\r\n    }\r\n    let [tokensResData, setTokensResData] = useState<TokenType[] | null>(null)\r\n    let [userAddress, setUserAddress] = useState<string>('')\r\n    let [filteredTokens, setFilteredTokens] = useState<TokenType[] | null>(null)\r\n    let [paginatedTokens, setPaginatedTokens] = useState<TokenType[] | null>(null)\r\n    let [currentPage, setCurrentPage] = useState<number>(1)\r\n    let [isFetching, setIsFetching] = useState<boolean>(false)\r\n\r\n    const handleSwitchChange = (e: boolean) => {\r\n        if (e) {\r\n            // @ts-ignore\r\n            setFilteredTokens(tokensResData.filter(data => data.tokenOwner === userAddress))\r\n            setCurrentPage(1)\r\n        } else {\r\n            setFilteredTokens(tokensResData)\r\n            setCurrentPage(1)\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        setIsFetching(true)\r\n        // @ts-ignore\r\n        let pagTokens = paginator(filteredTokens, currentPage)\r\n        setPaginatedTokens(pagTokens)\r\n        setIsFetching(false)\r\n    }, [filteredTokens, currentPage])\r\n\r\n    function paginator(items: TokenType[], current_page: number, per_page_items: number = 20) {\r\n        let page = current_page\r\n        let per_page = per_page_items\r\n        let offset = (page - 1) * per_page\r\n        let paginatedItems = items?.slice(offset).slice(0, per_page_items);\r\n        return paginatedItems\r\n    }\r\n\r\n    useEffect(() => {\r\n        setIsFetching(true)\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const NFTContractInstance = new ethers.Contract(NFTContract, NFT_ABI, provider);\r\n\r\n        (async () => {\r\n            let address = await signer.getAddress()\r\n            setUserAddress(address);\r\n\r\n            let nextTokenID = +await NFTContractInstance.getNextTokenId()\r\n            let tokensIDs: number[] = []\r\n            for (let i = 0; i < nextTokenID; i++) {\r\n                tokensIDs.push(i)\r\n            }\r\n            let tokensOwners: string[] = await Promise.all(\r\n                tokensIDs.map((id) => {\r\n                    return NFTContractInstance.ownerOf(id)\r\n                })\r\n            )\r\n            let tokensURIs: string[] = await Promise.all(\r\n                tokensIDs.map((id) => {\r\n                    return NFTContractInstance.tokenURI(id)\r\n                })\r\n            )\r\n            let tokensData = await Promise.all(\r\n                tokensURIs.map((URI) => {\r\n                    return encodingAPI.getEncodingData(URI).then((response: any) => response.data)\r\n                })\r\n            )\r\n\r\n            tokensData = tokensData.map((data, index) => {\r\n                return {\r\n                    ...data,\r\n                    tokenId: tokensIDs[index],\r\n                    tokenOwner: tokensOwners[index]\r\n                }\r\n            })\r\n\r\n            setTokensResData(tokensData);\r\n            setFilteredTokens(tokensData)\r\n            setIsFetching(false)\r\n        })()\r\n\r\n    }, [])\r\n\r\n    const handlePageChanged = (page: number) => {\r\n        setCurrentPage(page)\r\n    }\r\n    if(isFetching) return <Preloader height={'490px'}/>\r\n    return (\r\n        <div className='flex justify-center'>\r\n            {props.isConnected &&\r\n            <div className='py-6'>\r\n                <Switch checkedChildren=\"My\" unCheckedChildren=\"All\" defaultChecked={false}\r\n                        onChange={handleSwitchChange}/>\r\n                <div className='grid grid-cols-3 gap-4 py-6'>\r\n                    {paginatedTokens?.map(data => (\r\n                        <TokenCard name={data.name} description={data.description} file={data.file}\r\n                                   tokenId={data.tokenId}\r\n                                   tokenOwner={data.tokenOwner}\r\n                                   key={data.tokenId}/>\r\n                    ))}\r\n                </div>\r\n                <Pagination current={currentPage} total={filteredTokens?.length} pageSize={20} onChange={handlePageChanged}/>\r\n            </div>}\r\n\r\n            {(props.isConnected && tokensResData?.length === 0) &&\r\n            <Title level={4} className='mt-10'>You haven't tokens</Title>}\r\n\r\n            {!props.isConnected &&\r\n            <Title level={4} className='mt-10'>Please connect to MetaMask</Title>}\r\n        </div>\r\n    )\r\n}\r\nconst MapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isConnected: state.auth.isConnected,\r\n    ipfs: state.auth.ipfs\r\n})\r\nconst ViewTokensContainer = connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType>(MapStateToProps, {})(ViewTokens)\r\nexport default ViewTokensContainer"],"sourceRoot":""}